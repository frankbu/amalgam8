// Code generated by go-bindata.
// sources:
// cli/locales/en-US.json
// DO NOT EDIT!

package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _localesEnUsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x58\x4f\x6f\xe3\xb6\x13\xbd\xe7\x53\x0c\x72\xf1\x25\xbf\x20\x7b\x5b\xfc\x2e\x45\xb0\xfd\x83\x2d\xd2\x2e\x10\x67\x0b\x14\x45\x61\x8c\xa5\x91\xcc\x0d\x45\xaa\xe4\x30\x86\x51\xf4\xbb\x17\x23\xca\xb6\x5c\x58\xa4\xbc\xb1\xb3\x97\x05\x56\x19\xbe\xf7\x38\x6f\x38\x1e\xf2\x8f\x2b\x80\xbf\xaf\x00\x00\xae\x55\x79\xfd\x7f\xb8\xc6\xb6\x5d\x18\x6c\xe8\xfa\x26\x7e\x65\x87\xc6\x6b\x64\x65\x4d\xf7\xe7\xf7\xd7\x57\x00\xff\xdc\x1c\x5b\x16\x3c\xd6\x63\xeb\xee\x1b\xd4\x35\x36\xef\xe1\xc3\xc3\xc7\x71\x84\x17\x72\x5e\x16\x1c\xc7\xb8\xbb\xbd\xbb\x7d\x77\x7c\x71\x49\xcb\x50\x27\x05\xcc\x57\x76\x0d\x8f\x3f\xcc\x9f\xa0\xb0\x4d\x13\x8c\x2a\xba\x3f\xc1\x5a\xf1\x0a\xf6\xea\xac\x61\x67\xb5\x26\x07\xe8\x41\x31\x28\x0f\x2d\xb9\xca\xba\x86\xca\xdb\xe3\xdc\x5f\xbc\x35\x79\x6a\x1b\xb8\x0d\x0c\xca\xc0\xcf\xf3\x4f\xbf\x82\x20\x22\x1f\x07\xdc\x60\xa3\x4f\x01\xfc\xfd\xfe\x97\x87\x24\xa0\x32\x2f\xa8\x55\xb9\x08\x4e\x8f\x20\x7e\x8c\x11\xf0\xf9\xf1\x01\xac\x03\x6a\x5a\xde\x8c\x6c\xd7\x51\xad\x3c\xbb\x8d\xa0\x25\x55\x3e\xf6\x81\x02\x9a\x81\x62\xfb\x4c\xe9\x1c\xee\xc0\x9e\x24\xf4\x38\x5c\xb1\x33\x2f\xab\x6d\xe0\x73\x42\xdd\x5f\x81\x3c\x2f\x0a\xdb\xb4\x9a\x98\xca\x51\x69\x5d\x1c\x7c\xd8\xc5\x8d\x98\x50\xd9\x45\x49\xbe\x70\xaa\xe5\xf1\x22\x17\x6f\x3d\x48\xb0\xf8\x29\x15\x8a\x4b\x1b\x18\x78\x45\x50\x58\x53\xa9\x3a\xb8\xf8\xdd\x56\xdd\xc7\x0f\x0f\x1f\x47\x9c\xea\x18\x73\x75\x74\x26\x2e\x17\x34\x2d\x4a\x4a\xe6\x29\x68\x82\xef\x29\x91\x22\x4f\xee\x45\x15\xb4\xd0\xca\xf3\x84\x54\x3d\x28\xcf\xd0\xa0\xc1\x9a\x4a\x68\x54\xe1\x6c\x0f\xe0\x47\x44\x1e\xe0\xa7\x12\xf3\x3a\xe4\x78\x32\x93\x04\x9f\xe2\xe1\x8d\x89\xbf\x85\x79\x68\x5b\xeb\x98\x4a\x78\x41\x1d\xc8\x03\x3a\x82\x99\x34\x96\xd9\x0d\xcc\xa4\x1f\xcc\xe4\x58\xce\x18\x97\x9a\x66\x63\x16\xd8\xc0\x27\xe6\x6e\xb8\x33\xe8\x9b\x2f\x08\x8e\x32\x35\x88\xa5\x63\xfb\x1d\x70\xe5\xf3\x78\x0e\x96\x6d\x82\x53\x6c\x4f\x2b\x82\x3e\x0e\xe4\x27\x2c\x8f\xfa\x8d\x9c\xc2\x42\xd0\x4f\xb2\x2a\x2e\x49\x66\x6b\x88\x9a\x35\xe5\x44\xbc\x33\xa6\x7f\x08\xfb\xad\x4e\x8a\x34\xab\xc2\x11\x32\x4d\xe9\xc8\xc4\x31\x4f\x22\x02\xf0\xa0\x9e\x27\x10\x24\x1b\xf0\xeb\xa0\x2b\xa5\xd3\xf8\x8f\x84\x25\x60\x9c\x38\xac\xeb\x07\x05\xa5\xbb\xee\xce\xa8\x8c\x1c\x40\x84\x41\x0a\xa4\xd1\x47\x41\x6c\x21\xb2\xdc\x82\xa0\x78\xa8\x9c\x6d\xc0\x73\xa9\x0c\x2c\x37\x50\x52\x85\x41\xf3\x04\x91\xca\x88\xc5\x8e\x4a\xe5\x28\x5a\x9f\x55\xdc\xa7\x44\x08\xd1\x40\x07\x00\x03\x80\x14\x69\x68\xcb\x69\xae\x7e\xee\x02\xbf\x2a\xfb\x3d\x47\x6a\x1b\xaf\x47\xbf\xb0\xb7\x91\xe5\xab\xbd\xed\x45\xbe\xad\xb7\x35\x4d\x69\x97\x3f\x7d\xe5\x99\x12\xf4\x94\xfa\xd7\xe0\xca\xec\x9d\xe9\x9c\x12\x0b\x6a\xec\x8e\xb1\x43\x62\x4c\x5f\x73\x76\x50\x8c\xf5\x84\x5c\xb2\x32\x98\xf5\x6d\x87\x39\x58\x90\xc3\x3e\x6b\x67\xef\x3a\x7a\xd7\xdb\x73\xb4\xa8\xd3\x73\x7f\xcf\x89\x5a\xa7\x07\x8f\xfd\x34\x9b\x84\x8b\xd3\xec\x41\x4d\x4f\xae\x8b\x1e\x3e\x5f\xd0\x07\x24\xdd\x75\x55\x46\x71\xdf\x52\xa1\x2a\x45\xe5\xb6\x72\x6e\xc4\xf2\x1b\x49\xd5\x44\x9b\x7a\x01\xe7\xa9\xcd\x1e\xec\x5c\xe5\xb9\x4f\xce\x45\x2a\xb4\x87\xcf\x55\xcb\xfd\x09\x65\x22\x58\x95\x75\x99\x19\xe9\x47\x89\x80\x6e\xc9\xf6\xf1\x41\x2e\x5c\xdd\x65\xab\xbf\x83\x4d\xe4\x1a\x2e\x19\x2b\x1c\x0b\x1b\x1b\xc0\x11\x6a\xbd\x81\x35\x1a\x96\xce\x1f\x31\xf6\x47\xe0\xbb\xe3\x7c\xec\xb0\xaa\x54\xb1\xf0\x8c\x6e\x4a\xdb\x9d\x4b\x1c\x74\x1f\x2b\x72\x4e\x7e\x7d\x7a\x08\x21\x45\x30\xb4\xde\xcd\xfe\xb6\x9a\x76\x4e\x0e\x35\x24\x07\xa9\x8b\xb3\x9f\x71\x02\x3e\x04\xee\x65\x65\x81\x87\x5b\x60\xbb\xdd\xde\x24\x8a\x09\xcd\xf8\x1e\x5a\x72\x05\x19\xc6\x9a\xba\xdb\x7e\x9f\xbd\xbb\xff\xbd\xbb\xbb\x13\x3e\x4f\xa6\xec\x78\x0f\xa5\x64\xf9\xa9\x9d\x54\x3c\xd4\x42\x68\x3b\x70\x6c\x6c\x30\x3c\xd4\x70\x06\x07\x29\xfd\x3a\xf9\x16\xfc\x17\x29\x20\x6a\x17\x51\xef\xb7\x30\x17\x97\x76\x52\x6b\xb8\x97\xb8\x0b\x1d\xce\xa8\x21\xb9\xf9\x8b\xb3\x9f\xf3\x6d\x82\x0a\xd5\xd2\xc2\x85\xcc\x8b\x32\x71\x68\x01\xa1\x42\xa5\x83\x23\xf0\x05\x19\x74\xca\x02\x9a\x12\xd0\x7b\x72\xbc\x6d\x13\x24\x97\xfd\x1a\x95\xf1\xf1\x5d\x0f\xdb\x56\xf7\x6f\xdf\x79\x0d\x93\x2e\xc7\x6f\xa2\x84\x6d\x6b\xb5\xad\x37\xd9\x24\x0f\x50\x67\x1e\xb4\xad\x55\x81\x1a\xb6\xcb\xf3\x44\xdb\x0d\xf8\x2c\xd3\x7f\xb7\x3c\x3a\x25\xec\xc1\x8b\x15\x15\xcf\x69\xe4\xdf\x50\xab\xb2\xfb\x9f\x07\x49\xdc\x8a\x60\x49\x2b\x7c\x51\xd6\x6d\x5f\x61\x0f\x1f\xd4\xca\x10\x6b\x7a\xaf\x28\xaf\x43\x5b\x2c\x17\xd1\xda\x74\x9d\x75\x21\xe2\x9e\x32\x5f\xa8\xe0\x68\xa2\xac\x06\x65\xfa\x7e\x71\x92\x8d\x2b\xc2\x92\x5c\x9a\xb3\x1b\x6c\x37\x1d\x76\xff\x04\x2f\x07\xb6\x78\x96\x5d\xc6\xf5\x10\x3c\x95\x72\x53\x3d\x99\xbf\x45\x66\x72\xb9\xc3\xa5\x65\xab\xd6\xe8\xcd\x56\x80\x87\xf5\xca\xfa\x71\x3d\x0d\x72\xb1\x92\x8b\xf5\x8a\xa0\xa7\xc8\x6b\x79\xe3\x2b\xd2\x9e\x78\x8d\x2a\x4d\xfb\xa4\x1a\x12\xd3\x25\x10\x96\x54\x59\x47\xd0\x95\xee\xb6\xd0\x1c\xf9\xa0\xd9\x0f\x15\xb1\xac\x09\x46\x71\xaf\xaa\xf1\xb3\x1b\x98\x75\xff\x34\x13\x34\xe5\x47\xe7\xf9\xb3\x8a\x3f\xd0\xcf\xb4\x59\x5a\x74\x65\x7c\x3c\x88\xd0\x57\x7f\x5e\xfd\x1b\x00\x00\xff\xff\xed\x1f\x50\x9b\xca\x1c\x00\x00")

func localesEnUsJsonBytes() ([]byte, error) {
	return bindataRead(
		_localesEnUsJson,
		"locales/en-US.json",
	)
}

func localesEnUsJson() (*asset, error) {
	bytes, err := localesEnUsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/en-US.json", size: 7370, mode: os.FileMode(493), modTime: time.Unix(1481838196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/en-US.json": localesEnUsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"en-US.json": &bintree{localesEnUsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
